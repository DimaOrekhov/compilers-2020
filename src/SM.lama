-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
(* Assignment *)
fun eval (env, c, insns) {
  case insns of
    instruction:insnsTail ->
      case evalInstruction (env, c, instruction) of
        [newC, Nothing]        -> eval (env, newC, insnsTail)
      | [newC, Just (newTail)] -> eval (env, newC, newTail)
      esac
  | {}                    -> c
  esac
}


fun evalInstruction (env, conf@[stack, state, world], instruction) {
  local newTail = Nothing;
  [case instruction of
    CONST (val)  -> [val:stack, state, world]
  | LD (name)    -> [state(name):stack, state, world]
  | LDA (name)   -> [Ref(name):stack, state, world]
  | ST (name)    -> case stack of
                      x:stackTail -> [stackTail, state <- [name, x], world]
                    esac
  | STI          -> case stack of
                      x:Ref(name):stackTail -> [x:stackTail, state <- [name, x], world]
                    esac
  | BINOP (op)   -> case stack of
                      x:y:stackTail -> [evalOp (op, y, x):stackTail, state, world]
                    esac
  | READ         -> case readWorld (world) of
                     [value, newWorld] -> [value:stack, state, newWorld]
                    esac
  | WRITE        -> case stack of
                     value:stackTail -> [stackTail, state, writeWorld (value, world)]
                    esac
  | LABEL (s)    -> conf
  | JMP   (l)    -> newTail := Just (env.fromLabel(l)); conf
  | CJMP  (c, l) -> case stack of
                      x:stackTail ->
                        newTail := if c.shouldJump(x) then Just (env.fromLabel(l)) else Nothing fi;
                        [stackTail, state, world]
                    esac
  | DROP         -> case stack of
                      x:stackTail -> [stackTail, state, world]
                    esac
  | DUP          -> case stack of
                      x:stackTail -> [x:x:stackTail, state, world]
                    esac
  esac, newTail]
}

fun shouldJump(cjmpType, x) {
  case cjmpType of
    Z  -> x == 0
  | NZ -> x != 0
  esac
}
(* End *)

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Just an utility operator to append a single element to list
infix ++$ at +++ (lst, elem) {
  lst +++ singleton (elem)
}


-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
(* Assignment *)
public fun compileSM (stmt) {
  compileSMInner (stmt, initCompEnv(), Nothing) [0]
}


fun compileSMInner (stmt, compEnv, returnPoint) {
  local envToReturn = compEnv;
  [case stmt of
    Const (val)         -> singleton (CONST (val))
  | Var (name)          -> singleton (LD (name))
  | Ref (name)          -> singleton (LDA (name))
  | Ignore (expr)       ->
    case compileSMInner (expr, compEnv, returnPoint) of
      [exprCode, newCompEnv] ->
        envToReturn := newCompEnv;
        exprCode ++$ DROP
    esac
  | Binop (op, left, right) ->
    case compileSMInner (left, compEnv, Nothing) of
      [leftCode, newCompEnv] ->
        case compileSMInner (right, newCompEnv, Nothing) of
          [rightCode, newerCompEnv] ->
            envToReturn := newerCompEnv;
            leftCode +++ rightCode ++$ BINOP (op)
        esac
    esac
  | Assn (name, expr)   ->
    case compileSMInner (name, compEnv, Nothing) of
      [refCode, newCompEnv] ->
        case compileSMInner (expr, newCompEnv, Nothing) of
          [valCode, newerCompEnv] ->
            envToReturn := newerCompEnv;
            refCode +++ valCode ++$ STI
        esac
    esac
  | Seq  (stmt1, stmt2) ->
    case compileSMInner (stmt1, compEnv, Nothing) of
      [stmtCode1, newCompEnv] ->
        case compileSMInner (stmt2, newCompEnv, returnPoint) of
          [stmtCode2, newerCompEnv] ->
            envToReturn := newerCompEnv;
            stmtCode1 +++ stmtCode2
        esac
    esac
  | Skip                -> {}
  | Read (name)         -> {READ, ST (name)}
  | Write (expr)        ->
    case compileSMInner (expr, compEnv, Nothing) of
      [exprCode, newCompEnv] ->
        envToReturn := newCompEnv;
        exprCode ++$ WRITE
    esac
  | s@If (expr, stmt1, stmt2) ->
    case returnPoint of
      Just (point) ->
        case compEnv.genLabels (1) of
          [beginElse, newCompEnv] ->
            case generateIfCode (s, beginElse, point, newCompEnv) of
              [code, newerEnv] ->
                envToReturn := newerEnv;
                code
            esac
        esac
    | Nothing     ->
        case compEnv.genLabels (2) of
          [beginElse, point, newCompEnv] ->
            case generateIfCode (s, beginElse, point, newCompEnv) of
              [code, newerEnv] ->
                envToReturn := newerEnv;
                code
                ++$ LABEL (point)
            esac
        esac
    esac
  | While (expr, body) ->
    case compEnv.genLabels (2) of
      [beginCondition, beginStatement, newCompEnv] ->
        case compileSMInner (body, newCompEnv, Nothing) of
          [bodyCode, newerCompEnv] ->
            case compileSMInner (expr, newerCompEnv, Nothing) of
              [exprCode, newestCompEnv] ->
                envToReturn := newestCompEnv;
                singleton (JMP (beginCondition))
                ++$ LABEL (beginStatement)
                +++ bodyCode
                ++$ LABEL (beginCondition)
                +++ exprCode
                ++$ CJMP (NZ, beginStatement)
            esac
        esac
    esac
  | Repeat (body, expr) ->
    case compEnv.genLabels (1) of
      [beginStatement, newCompEnv] ->
        case compileSMInner (body, newCompEnv, Nothing) of
          [bodyCode, newerCompEnv] ->
            case compileSMInner (expr, newerCompEnv, Nothing) of
              [exprCode, newestCompEnv] ->
                envToReturn := newestCompEnv;
                singleton (LABEL (beginStatement))
                +++ bodyCode
                +++ exprCode
                ++$ CJMP (Z, beginStatement)
            esac
        esac
    esac
  esac, envToReturn]
}

fun generateIfCode (If(expr, stmt1, stmt2), beginElse, returnPoint, env) {
    local envToReturn = env;
    [case compileSMInner (expr, env, Nothing) of
      [exprCode, newCompEnv] ->
        case compileSMInner (stmt1, newCompEnv, Just (returnPoint)) of
          [stmtCode1, newerCompEnv] ->
            case compileSMInner (stmt2, newerCompEnv, Just (returnPoint)) of
              [stmtCode2, newestCompEnv] ->
                envToReturn := newestCompEnv;
                exprCode
                ++$ CJMP (Z, beginElse)
                +++ stmtCode1
                ++$ JMP (returnPoint)
                ++$ LABEL (beginElse)
                +++ stmtCode2
            esac
        esac
    esac, envToReturn]
}
(* End *)
