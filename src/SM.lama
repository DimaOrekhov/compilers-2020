-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  local globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, val) {
    case loc of
      Arg (i) -> args[i] := val
    | Loc (i) -> locs[i] := val
    | Glb (x) -> local g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then val else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c@[st, cst, s, w], insns) {
      case insns of
        instruction:insnsTail ->
          case evalInstruction (env, c, instruction) of
            [newC, Nothing]        -> eval (env, newC, insnsTail)
          | [newC, Just (newTail)] -> eval (env, newC, newTail)
          esac
      | {}                    -> c
      esac
  }

  fun evalInstruction (env, conf@[stack, state, world], instruction) {
    local newTail = Nothing;
    [case instruction of
      CONST (val)  -> [val:stack, state, world]
    | LD (name)    -> [state(name):stack, state, world]
    | ST (name)    -> case stack of
                        x:stackTail -> [stackTail, state <- [name, x], world]
                      esac
    | BINOP (op)   -> case stack of
                        x:y:stackTail -> [evalOp (op, y, x):stackTail, state, world]
                      esac
    | READ         -> case readWorld (world) of
                       [value, newWorld] -> [value:stack, state, newWorld]
                      esac
    | WRITE        -> case stack of
                       value:stackTail -> [stackTail, state, writeWorld (value, world)]
                      esac
    | LABEL (s)    -> conf
    | JMP   (l)    -> newTail := Just (env.fromLabel(l)); conf
    | CJMP  (c, l) -> newTail := case stack of
                        x:stackTail -> if c.shouldJump(x) then Just (env.fromLabel(l)) else Nothing fi
                      esac;
                      conf
    esac, newTail]
  }

  fun shouldJump(cjmpType, x) {
    case cjmpType of
      Z  -> x == 0
    | NZ -> x != 0
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nArgs, nLocals, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Just an utility operator to append a single element to list
infix ++$ at +++ (lst, elem) {
  lst +++ singleton (elem)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- Takes an expression, returns a list (of, possibly, lists)
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Const (val)             -> singleton (CONST (val))
  | Var (name)              -> singleton (LD (name))
  | Binop (op, left, right) -> compileExpr (left) +++ compileExpr (right) ++$ BINOP (op)
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for codegeneration:
--    a. generate the code for thetopmost expression (the progrman itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

public fun compileSM (expr) {
  compileSMInner (stmt, initCompEnv(), Nothing) [0]
}


fun compileSMInner (stmt, compEnv, returnPoint) {
  local envToReturn = compEnv;
  [case stmt of
    Assn (name, expr)   -> compileExpr (expr) ++$ ST (name)
  | Seq  (stmt1, stmt2) ->
    case compileSMInner (stmt1, compEnv, Nothing) of
      [stmtCode1, newCompEnv] ->
        case compileSMInner (stmt2, newCompEnv, returnPoint) of
          [stmtCode2, newerCompEnv] ->
            envToReturn := newerCompEnv;
            stmtCode1 +++ stmtCode2
        esac
    esac
  | Skip                -> {}
  | Read (name)         -> {READ, ST (name)}
  | Write (expr)        -> compileExpr (expr) ++$ WRITE
  | s@If (expr, stmt1, stmt2) ->
    case returnPoint of
      Just (point) ->
        case compEnv.genLabels (1) of
          [beginElse, newCompEnv] ->
            case generateIfCode (s, beginElse, point, newCompEnv) of
              [code, newerEnv] ->
                envToReturn := newerEnv;
                code
            esac
        esac
    | Nothing     ->
        case compEnv.genLabels (2) of
          [beginElse, point, newCompEnv] ->
            case generateIfCode (s, beginElse, point, newCompEnv) of
              [code, newerEnv] ->
                envToReturn := newerEnv;
                code
                ++$ LABEL (point)
            esac
        esac
    esac
  | While (expr, body) ->
    case compEnv.genLabels (2) of
      [beginCondition, beginStatement, newCompEnv] ->
        case compileSMInner (body, newCompEnv, returnPoint) of
          [bodyCode, newerCompEnv] ->
            envToReturn := newerCompEnv;
            singleton (JMP (beginCondition))
            ++$ LABEL (beginStatement)
            +++ bodyCode
            ++$ LABEL (beginCondition)
            +++ compileExpr (expr)
            ++$ CJMP (NZ, beginStatement)
        esac
    esac
  | Repeat (body, expr) ->
    case compEnv.genLabels (1) of
      [beginStatement, newCompEnv] ->
        case compileSMInner (body, newCompEnv, returnPoint) of
          [bodyCode, newerCompEnv] ->
            envToReturn := newerCompEnv;
            singleton (LABEL (beginStatement))
            +++ bodyCode
            +++ compileExpr (expr)
            ++$ CJMP (Z, beginStatement)
        esac
    esac
  esac, envToReturn]
}

fun generateIfCode (If(expr, stmt1, stmt2), beginElse, returnPoint, env) {
    local envToReturn = env;
    [case compileSMInner (stmt1, env, Just (returnPoint)) of
      [stmtCode1, newCompEnv] ->
        case compileSMInner (stmt2, newCompEnv, Just (returnPoint)) of
          [stmtCode2, newerCompEnv] ->
            envToReturn := newerCompEnv;
            compileExpr(expr)
            ++$ CJMP (Z, beginElse)
            +++ stmtCode1
            ++$ JMP (returnPoint)
            ++$ LABEL (beginElse)
            +++ stmtCode2
        esac
    esac, envToReturn]
}
(* End *)
