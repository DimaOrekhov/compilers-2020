-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;
import Ref;
import Collection;

-- Signals an error; takes an error message and location info
fun error (msg, loc) {
  failure ("%s at %d:%d\n", msg, loc.fst, loc.snd)
}

-- An attribute-processing functions
-- Attributes are:
--   Val  --- a plain value (aka "rvalue")
--   Ref  --- a reference to a mutable cell (aka "lvalue")
--   Void --- no value (aka "void"/"unit")

-- Checks if a plain value "val" can be used in the context described by
-- the attribute "atr".
fun assertValue (atr, val, loc) {
  case atr of
    Ref  -> error ("reference expected", loc)
  | Void -> Ignore (val)
  | _    -> val
  esac
}

fun assertVoid (atr, val, loc) {
  case atr of
    Void -> val
  | Val  -> error ("value expected", loc)
  | _    -> error ("reference expected", loc)
  esac
}

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop (op) {
  [syntax (pos -s[op]), fun (l, loc, r) {
                          fun (a) {
                            assertValue (a, Binop (op, l (Val), r (Val)), loc)
                          }
                        }
  ]
}

local primary  = memo $ eta syntax (
                                    -- decimal constant
                                    loc=pos x=decimal                                 {fun (a) {assertValue (a, Const (stringInt (x)), loc)}}     |

                                    -- identifier
                                    x=lident                                          {fun (a) {
                                                                                         case a of
                                                                                           Ref  -> Ref (x)
                                                                                         | Void -> Ignore (Var (x))
                                                                                         | _    -> Var (x)
                                                                                         esac
                                                                                      }} |
                                    $(failure ("the rest of primary parsing in not implemented\n"))),
      basic    = memo $ eta (expr ({[Right, singleton ([s (":="),
                                                        fun (l, loc, r) {
                                                          fun (a) {assertValue (a, Assn (l (Ref), r (Val)), loc)}
                                                        }])],
                                    [Left , map (binop, singleton ("!!"))],
                                    [Left , map (binop, singleton ("&&"))],
                                    [Nona , map (binop, {"==", "!=", "<", ">", "<=", ">="})],
                                    [Left , map (binop, {"+", "-"})],
                                    [Left , map (binop, {"*", "/", "%"})]
                                   },
                                   primary)),
      exp      = memo $ eta syntax (basic | s1=basic s[";"] s2=exp {fun (a) {Seq (s1 (Void), s2 (a))}});

local stmt = memo $ eta (seqParser |> bypass(end));

local assnParser = memo $ eta syntax (name=lident s[":="] value=exp {Assn (name, value)}),
      readParser = memo $ eta syntax (kRead s["("] name=lident s[")"] {Read (name)}),
      writeParser = memo $ eta syntax (kWrite s["("] value=exp s[")"] {Write (value)}),
      skipParser = memo $ eta syntax (kSkip {Skip}),
      -- if statement
      ifParser = memo $ eta syntax (kIf stmt=ifBody {stmt}),
      ifBody = memo $ eta syntax (cond=exp kThen thn=seqParser els=ifCont {If (cond, thn, els)}), -- thn is possibly scoped
      ifCont = memo $ eta syntax (kFi {Skip} |
                                  kElif body=ifBody {body} |
                                  kElse body=seqParser kFi {body}),
      -- while statement
      whileParser = memo $ eta syntax (kWhile cond=exp kDo body=seqParser kOd {While (cond, body)}),
      -- for statement
      forParser = memo $ eta syntax (
        kFor init=singleStatementParser s[","] cond=exp s[","] act=assnParser kDo body=seqParser kOd
        {Seq(init, While (cond, Seq (body, act)))}
      ),
      -- repeat until statement
      repeatParser = memo $ eta syntax (kRepeat body=seqParser kUntil cond=exp {Repeat (body, cond)}),
      singleStatementParser = memo $ eta (assnParser |
                                          readParser |
                                          writeParser |
                                          skipParser |
                                          ifParser |
                                          whileParser |
                                          forParser |
                                          repeatParser),
      seqParser = memo $ eta syntax (stmt=singleStatementParser s[";"] tail=seqParser {Seq (stmt, tail)} |
                                     singleStatementParser);

-- Public top-level parser
public parse = syntax (s=exp {s (Void)});
