-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  local map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
(* Assignment
fun eval (env, c, insns) {
  failure ("SM eval not implemented\n")
}
   End *)
(* Implementation *)
fun eval (env, c, insns) {
  fun eval (c@[st, s, w], insns) {
    -- printf ("Eval insn: %s\n", case insns of i : _ -> showSMInsn (i) | _ -> "nil" esac);
    -- printf ("conf: [%s, %s, %s]\n", st.string, map (fun (x) {s (x).string}, {"i", "j", "s"}).stringcat, w.string);
    case insns of
      {}                       -> c
    | JMP  (lab) : _           -> eval (c, env.fromLabel (lab))
    | CJMP (cond, lab) : insns ->
        case st of
          n : st -> if case cond of "z" -> n == 0 | _ -> n != 0 esac
                    then eval ([st, s, w], env.fromLabel (lab))
                    else eval ([st, s, w], insns)
                    fi
        esac
    | i : insns ->
        eval (
          case i of
            READ       -> case readWorld (w) of [n, w]     -> [n : st, s, w]                 esac
          | WRITE      -> case st            of n : st     -> [st, s, writeWorld (n, w)]     esac
          | BINOP (op) -> case st            of x : y : st -> [evalOp (op, y, x) : st, s, w] esac
          | CONST (n)  -> [n : st, s, w]
          | LD    (x)  -> [s (x) : st, s, w]
          | LDA   (x)  -> [Ref (x) : st, s, w]
          | ST    (x)  -> case st of n : _ -> [st, s <- [x, n], w] esac
          | STI        -> case st of n : Ref (x) : st -> [n : st, s <- [x, n], w] esac
          | DUP        -> [st.fst : st, s, w]
          | DROP       -> [st.snd, s, w]
          | LABEL (_)  -> c          
          esac,
          insns
        )
    esac
  }

  eval (c, insns)
}
(* End *)

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then singleton (env)
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
(* Assignment
public fun compileSM (stmt) {
  failure ("compileSM not implemented\n")
}
  End *)
(* Implementation *)
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) ->
        case env.genLabel of
          [iLabel, env] ->
             case compile (iLabel, env, e) of
               [iUsed, env, eCode] ->
                  [false, env, eCode <+> label (iLabel, iUsed) <+ DROP]
             esac
        esac
    | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e) ->
       case env.genLabel of
         [wLabel, env] ->
            case compile (wLabel, env, e) of
              [wUsed, env, eCode] ->
                 [false, env, eCode <+> label (wLabel, wUsed) <+ WRITE]
            esac
       esac
    | Binop  (op, l, r) ->
        case env.genLabels (2) of
          [rLabel, opLabel, env] ->
            case compile (rLabel, env, l) of
              [rUsed, env, lCode] ->
                 case compile (opLabel, env, r) of
                   [opUsed, env, rCode] ->
                      [false, env, lCode <+>
                                   label (rLabel, rUsed) <+>
                                   rCode <+>
                                   label (opLabel, opUsed) <+
                                   BINOP (op)
                      ]
                 esac
            esac
        esac       
    | Assn (Ref (x), e) ->
       case env.genLabel of
         [aLabel, env] ->
           case compile (aLabel, env, e) of
             [aUsed, env, eCode] ->
                [false, env, eCode <+> label (aLabel, aUsed) <+ ST (x)]
           esac
       esac
    | Assn (l, r) ->
        case env.genLabels (2) of
          [rLabel, aLabel, env] ->
            case compile (rLabel, env, l) of
              [rUsed, env, lCode] ->
                 case compile (aLabel, env, r) of
                   [aUsed, env, rCode] ->
                      [false, env, lCode <+>
                                   label (rLabel, rUsed) <+>
                                   rCode <+>
                                   label (aLabel, aUsed) <+
                                   STI
                      ]
                 esac
            esac
        esac    
    | Seq (s1, s2)   ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Repeat (body, cond) ->
        case env.genLabels (3) of
          [condLabel, bodyLabel, jumpLabel, env] ->
            case compile (condLabel, env, body) of
              [condLabelUsed, env, bodyCode] ->
                 case compile (jumpLabel, env, cond) of
                   [jumpLabelUsed, env, condCode] ->
                      [false, env, singletonBuffer (LABEL (bodyLabel)) <+>
                                   bodyCode <+>
                                   label (condLabel, condLabelUsed) <+>
                                   condCode <+>
                                   label (jumpLabel, jumpLabelUsed) <+
                                   CJMP ("z", bodyLabel)
                      ]
                 esac
            esac
        esac
    | If (cond, th, el)  ->
        case env.genLabels (2) of
          [jumpLabel, elseLabel, env] ->
            case compile (lab, env, th) of
              [labUsedInThen, env, thenCode] ->
                 case compile (lab, env, el) of
                   [labUsedInElse, env, elseCode] ->
                     case compile (jumpLabel, env, cond) of
                       [jumpLabelUsed, env, condCode] ->
                          [true, env, condCode <+>
                                      label (jumpLabel, jumpLabelUsed) <+
                                      CJMP ("z", elseLabel),
                                      thenCode <+
                                      JMP (lab) <+
                                      LABEL (elseLabel) <+>
                                      elseCode
                          ]
                     esac
                 esac
            esac
        esac
    | While (cond, body) ->
        case env.genLabels (3) of
          [bodyLabel, condLabel, jumpLabel, env] ->
             case compile (condLabel, env, body) of
               [_, env, bodyCode] ->
                  case compile (jumpLabel, env, cond) of
                    [jumpLabelUsed, env, condCode] ->
                       [false, env, singletonBuffer (JMP (condLabel)) <+
                                     LABEL (bodyLabel) <+>
                                     bodyCode <+
                                     LABEL (condLabel) <+>
                                     condCode <+>
                                     label (jumpLabel, jumpLabelUsed) <+
                                     CJMP ("nz", bodyLabel)]
                  esac
             esac
        esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer (code <+> label (endLab, endLabUsed))
       esac
  esac
}
(* End *)
